{"version":3,"sources":["components/header.jsx","components/slider.jsx","components/movie.jsx","components/movies.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","reactstrap_es","color","dark","expand","navbar","style","width","href","marginLeft","marginRight","class","Component","Slider","xs","Movie","state","movie","_this2","this","fetch","props","imdbID","then","response","json","responseJSON","setState","_this$state$movie","Runtime","Released","Plot","md","className","fontSize","src","Poster","data-holder-rendered","height","display","Title","onClick","onAddToWatchlist","type","Movies","_this$props","movies","map","movie_Movie","key","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","addToWatchList","console","log","nowshowing","watchlist","favourites","API","data","Search","Fragment","header","slider_Slider","movies_Movies","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8fd64a88.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Nav, Navbar, Container, NavbarBrand, NavItem, NavLink} from 'reactstrap';\r\n\r\nclass Header extends Component{\r\n    render(){\r\n        return(\r\n            // <div className=\"navbar navbar-dark bg-dark shadow-sm\">\r\n            //     <div className=\"container d-flex justify-content-between\">\r\n            //         <a href=\"#\" className=\"navbar-brand d-flex align-items-center\">\r\n            //             <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" className=\"mr-2\"><path d=\"M23 19a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h4l2-3h6l2 3h4a2 2 0 0 1 2 2z\"></path><circle cx=\"12\" cy=\"13\" r=\"4\"></circle></svg>\r\n            //             <strong>Album</strong>\r\n            //         </a>\r\n            //         <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarHeader\" aria-controls=\"navbarHeader\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            //             <span className=\"navbar-toggler-icon\"></span>\r\n            //         </button>\r\n            //     </div>\r\n            // </div>\r\n\r\n            <Navbar color=\"dark\" dark expand=\"md\">\r\n                <Container>\r\n                    <Nav navbar style={{width: \"100%\"}}>\r\n                    <NavbarBrand href=\"/\">ramroseat</NavbarBrand>     \r\n                    <NavItem style={{ marginLeft: \"auto\", marginRight: \"15px\"}}>\r\n                        <NavLink href=\"#\" style={{color: \"white\"}}>Now Showing</NavLink>\r\n                    </NavItem>\r\n                        <NavItem style={{ marginRight: \"15px\"}}>\r\n                            <NavLink href=\"#\" style={{ color: \"white\" }}>Watchlist<span style={{ marginLeft: \"5px\"}} class=\"badge badge-primary\">0</span></NavLink>\r\n                    </NavItem>\r\n                    <NavItem>\r\n                            <NavLink href=\"#\" style={{ color: \"white\" }}>Favourites<span style={{ marginLeft: \"5px\" }} class=\"badge badge-primary\">0</span></NavLink>\r\n                    </NavItem>\r\n                    </Nav>\r\n                </Container>\r\n            </Navbar>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react'\r\nimport { Container, Row, Col } from 'reactstrap';\r\n\r\nexport default class Slider extends Component {\r\n  render() {\r\n    return (\r\n      <Container>\r\n          <Row>\r\n              <Col xs=\"12\">\r\n                slider comes from here        \r\n              </Col>\r\n          </Row>\r\n      </Container>            \r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Col } from 'reactstrap';\r\n\r\nconst API = 'http://www.omdbapi.com/?apikey=fcdfe84d&i=';\r\n\r\nexport default class Movie extends Component {\r\n\r\n  // constructor(props) {\r\n  //   super(props);\r\n\r\n  //   this.state = {\r\n  //     movie: [],\r\n  //   };\r\n  // }\r\n\r\n\r\n  state = {\r\n    movie: [],\r\n  };\r\n\r\n  componentDidMount() {\r\n    \r\n    fetch(API + this.props.movie.imdbID)\r\n      .then(response => response.json())\r\n      .then((responseJSON) => {\r\n        // do stuff with responseJSON here...        \r\n        this.setState({ movie: responseJSON }) \r\n      });\r\n      // .then(data => this.setState({ movie: data }));\r\n    \r\n  }\r\n\r\n  render() {    \r\n\r\n    const { Runtime, Released, Plot } = this.state.movie;        \r\n    \r\n    return (\r\n      <Col md=\"4\">\r\n            <div className=\"card mb-4 shadow-sm\">\r\n                \r\n                    <div className=\"card-body\" style={{ fontSize: \"14px\"}}>\r\n                    <img className=\"card-img-top\" src={this.props.movie.Poster} data-holder-rendered=\"true\" style={{height: \"auto\", width: \"100%\", display: \"block\"}}/>                        \r\n                        <h4 className=\"movie-name\">{this.props.movie.Title}</h4>\r\n                        <small className=\"text-muted\">Runtime: {Runtime}</small> <br/>\r\n                        <small className=\"text-muted\">Release Date: {Released}</small>\r\n                        {/* <div>Director: {this.props.movie.director}</div>\r\n                        <div>Cast: <br/>{this.props.movie.stars}</div>                         */}\r\n                        <div className=\"plot\">\r\n                        { Plot }\r\n                        </div>\r\n                        <div className=\"d-flex justify-content-between align-items-center\">\r\n                        <button onClick={this.props.onAddToWatchlist(this.props.movie.imdbID)}type=\"button\" className=\"btn btn-sm btn-outline-secondary\">Add to Watchlist</button>                            \r\n                        </div>\r\n                    </div>\r\n              </div>\r\n      </Col> \r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Movie from './movie';\r\nimport { Row} from 'reactstrap';\r\n\r\nexport default class Movies extends Component {\r\n  \r\n\r\n  render() {\r\n\r\n    const { movies, onAddToWatchlist } = this.props;    \r\n    \r\n    return (            \r\n          <Row>\r\n            \r\n                {movies.map(movie =>\r\n          <Movie key=\"movie.imdbID\" onAddToWatchlist={onAddToWatchlist} movie={movie}></Movie>                       \r\n                )}\r\n                             \r\n          </Row>      \r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './components/header';\nimport Slider from './components/slider';\nimport Movies from './components/movies';\n\nconst API = 'http://www.omdbapi.com/?i=tt3896198&apikey=fcdfe84d';\n\nlet DEFAULT_QUERY = '&s=the+rock&type=movie';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      movies: [],   \n      nowshowing: [],   \n      watchlist: [], \n      favourites: []     \n    };\n  }\n\n  componentDidMount() {        \n    fetch(API + DEFAULT_QUERY)\n      .then(response => response.json())      \n      .then(data => this.setState({ movies: data.Search}));\n  }\n\n  // state = {\n  //   movies:[\n  //     { \n  //       id: 1, name: \"Bohemian Rhapsody\", director: 'Byan Singer', stars: [\"Rami Malek\", \"Lucy Boynton\", \"Gwilym Lee\"], imdbRating: \"8.4\", releaseDate: \"2 November 2018\", runtime: \"2h 14min\" \n  //     },\n  //     {\n  //       id: 2, name: \"Dunkirk\", director: 'Christopher Nolan', stars: [\"Fionn Whitehead\", \"Barry Keoghan\", \"Mark Rylance\"], imdbRating: \"7.9\", releaseDate: \"21 July 2017\", runtime: \"1hr 46min\" \n  //     },\n  //     {\n  //       id: 3, name: \"The Hitman's Bodyguard\", director: 'Patrick Hughes', stars: [\"Ryan Reynolds\", \"Samuel L. Jackson\", \"Gary Oldman\"], imdbRating: \"6.9\", releaseDate: \"18 August 2017\", runtime: \"1hr 58min\"\n  //     },\n  //     {\n  //       id: 4, name: \"The Nun\", director: 'Corin Handy', stars: [\"Demián Bichir\", \"Taissa Farmiga\", \"Jonas Bloquet\"], imdbRating: \"5.6\", releaseDate: \"7 September 2018\", runtime: \"96min\"\n  //     },      \n  //   ]    \n  // }\n  \n  addToWatchList = imdbID =>{\n      console.log('add ' + imdbID + ' to watchlist');\n  }\n\n  render() {\n\n    const { movies} = this.state;    \n    \n    return (\n      <React.Fragment>\n        <Header></Header>\n        <Slider></Slider>\n        <div className=\"album py-5 bg-light\">\n        <main className=\"container\">\n          <Movies onAddToWatchlist={this.addToWatchList}movies={movies}></Movies>\n        </main>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}